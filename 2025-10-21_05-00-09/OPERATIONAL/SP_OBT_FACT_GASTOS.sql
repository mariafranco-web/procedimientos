CREATE PROCEDURE `amrl-data-prd`.OPERATIONAL.SP_OBT_FACT_GASTOS()
BEGIN

	CREATE OR REPLACE TABLE amrl-data-prd.CONSUMPTION.OBT_FACT_GASTOS PARTITION BY FECHA_FACTURA CLUSTER BY GRUPO, PROYECTO, AREA, TERCERO
	AS

    WITH FACTURAS AS (
        /**************************** Esta operacion Crea la capa de consumo para gastos aca se consolidan las tablas de hechos y dimensiones requeridas, la informacion se encuentra agrupada por factura y segmentos contables ***************************/
      SELECT 
        FCXP.NUMERO_FACTURA,
        DATE(FCXP.FH_FACTURA)FH_FACTURA,
        FCXP.FH_VENC,
        FCXP.CONDICION_PAGO_FACT,
        FCXP.DIAS_VENCIDOS_FACT,
        FCXP.EST_CONT,
        FCXP.VR_FACTCAB,
        FCXP.DIAS_FACTURA,	
        FCXP.FH_RECIBO FH_RECIBO,
        FCXP.FECHA_VEN_CRE,
        DC.COMPANIA,
        DC.NOMBRE_COMPANIA,
        DC.CUENTA,
        DC.NOMBRE_CUENTA,
        FCXP.SK_INVOICEID,
        FCXP.SK_DISTORIGEN,
        FCXP.SK_RCVTRANSACTIONID,
        FCXP.SK_CHARGEAPPLICABLETODISTID,
        FCXP.FH_CONTABLE, 
        FCXP.GRUPO_PAGO,
        FCXP.ESTADO_FACTURA,
        FDCA.SK_CODECOMBINATIONID,
        COALESCE(DC.GRUPO,FCXP.COD_GRUP) GRUPO,
        COALESCE(DC.NOMBRE_GRUPO,(SELECT DISTINCT C.NOMBRE_GRUPO FROM amrl-data-prd.PRESENTATION.DIM_CUENTAS C WHERE C.GRUPO=FCXP.COD_GRUP)) NOMBRE_GRUPO,
        COALESCE(DC.PROYECTO,COD_PROY) PROYECTO,
        COALESCE(DC.NOMBRE_PROYECTO,(SELECT DISTINCT C.NOMBRE_PROYECTO FROM amrl-data-prd.PRESENTATION.DIM_CUENTAS C WHERE C.PROYECTO=FCXP.COD_PROY)) NOMBRE_PROYECTO,
        COALESCE(DC.AREA,COD_AREA) AREA,
        COALESCE(DC.NOMBRE_AREA,(SELECT DISTINCT C.NOMBRE_AREA FROM amrl-data-prd.PRESENTATION.DIM_CUENTAS C WHERE C.AREA=FCXP.COD_AREA)) NOMBRE_AREA,
        DC.CONSOLIDADOR,
        COALESCE(DC.DES_CONSOLIDADOR,(SELECT DISTINCT C.DES_CONSOLIDADOR FROM amrl-data-prd.PRESENTATION.DIM_CUENTAS C WHERE C.CONSOLIDADOR=FCXP.GRUPO_PAGO)) DES_CONSOLIDADOR,
        CASE FCXP.EST_APRO
            WHEN 'WFAPPROVED' THEN 'APROBADO POR FLUJO DE TRABAJO'
            WHEN 'MANUALLY APPROVED' THEN 'APROBADO MANUALMENTE'
            WHEN 'NEEDS WF REAPPROVAL' THEN 'NECESITA REAPROBACIÓN DE FLUJO DE TRABAJO'
            WHEN 'STOPPED' THEN 'INTERRUMPIDO'
            WHEN 'NOT REQUIRED' THEN 'NO REQUERIDO'
            WHEN 'INITIATED' THEN 'INICIADO'
            WHEN 'REQUIRED' THEN 'REQUERIDO'
            ELSE FCXP.EST_APRO
        END AS EST_APRO,

        CASE FCXP.EST_VALIDACION
            WHEN 'CANCELLED' THEN 'CANCELADO'
            WHEN 'NEVER APPROVED' THEN 'NUNCA HA SIDO APROBADO'
            WHEN 'UNPAID' THEN 'NO PAGADO'
            WHEN 'APPROVED' THEN 'APROBADO'
            WHEN 'AVAILABLE' THEN 'DISPONIBLE'
            WHEN 'FULL' THEN 'COMPLETO'
            WHEN 'INCOMPLETE' THEN 'INCOMPLETO'
            WHEN 'PERMANENT' THEN 'PERMANENTE'
            WHEN 'UNAPPROVED' THEN 'NO APROBADO'
            WHEN 'NEEDS REAPPROVAL' THEN 'NECESITA REAPROBACIÓN'
            ELSE FCXP.EST_VALIDACION
        END AS EST_VALIDACION,

        CASE FCXP.ESTADO_PAGO 
          WHEN 'Y' THEN 'Pagada'
          WHEN'P' THEN 'Pagada Parcialmente' 
          WHEN'N' THEN 'No Pagada' END ESTADO_PAGO,
          CASE 
            WHEN COALESCE(DC.AREA,COD_AREA) LIKE '%ADM%' THEN 'ADMINISTRATIVO'
            WHEN COALESCE(DC.AREA,COD_AREA) LIKE '%VTA%' THEN 'SALA DE VENTA'
            WHEN COALESCE(DC.AREA,COD_AREA) LIKE '%OBR%' THEN 'OBRA'
          ELSE 'OTROS' 		
          END TIPO_PROYECTO,
          FCXP.APINVOICELINESALLLINETYPELOOKUPCODE LOOKUPCODE,
        (DIAS_FACTURA - DATE_DIFF(
            CURRENT_DATE(), 
            DATE_SUB(CURRENT_DATE(), INTERVAL CAST(COALESCE(COND_PAGO_PROV, 0) AS INT64) DAY), 
            DAY
        ) ) DIAS_VENCIDOSPROV ,
        CASE
            WHEN (DIAS_FACTURA - DATE_DIFF(
            CURRENT_DATE(), 
            DATE_SUB(CURRENT_DATE(), INTERVAL CAST(COALESCE(COND_PAGO_PROV, 0) AS INT64) DAY), 
            DAY
        ) ) <= 30 THEN 'Menor o igual a 30 Días'
            WHEN (DIAS_FACTURA - DATE_DIFF(
            CURRENT_DATE(), 
            DATE_SUB(CURRENT_DATE(), INTERVAL CAST(COALESCE(COND_PAGO_PROV, 0) AS INT64) DAY), 
            DAY
        ) ) > 30 AND (DIAS_FACTURA - DATE_DIFF(
            CURRENT_DATE(), 
            DATE_SUB(CURRENT_DATE(), INTERVAL CAST(COALESCE(COND_PAGO_PROV, 0) AS INT64) DAY), 
            DAY
        ) ) <= 60 THEN 'Entre 30 y 60 Días'
            WHEN (DIAS_FACTURA - DATE_DIFF(
            CURRENT_DATE(), 
            DATE_SUB(CURRENT_DATE(), INTERVAL CAST(COALESCE(COND_PAGO_PROV, 0) AS INT64) DAY), 
            DAY
        ) ) > 60 THEN 'Mayor o igual a 60 Días'
            ELSE 'Otro'  -- Puedes ajustar esto según tus necesidades
          END AS RANGO_VENCIMIENTO,
        DT.TERCERO,
        DT.NIT,
        FTC.COND_PAGO_PROV ,
        FTC.TIP_ORD,	
        FTC.EST_DOC_ORD,
        FTC.DESC_ORD,
        FTC.ORDEN_COMPRA,
        FTC.FH_APROB_ORD,
        FTC.FH_ORDEN,
        FDCA.LEDGERID,
        IFNULL(
            REPLACE(
                SUBSTR(FTC.ORD_US_CRE, 1, 
                    CASE 
                        WHEN INSTR(FTC.ORD_US_CRE, '@') > 0 
                        THEN INSTR(FTC.ORD_US_CRE, '@') - 1 
                        ELSE LENGTH(FTC.ORD_US_CRE) 
                    END
                ),
                '.',
                ' '
            ),
            REPLACE(FTC.ORD_US_CRE, '.', ' ')
        ) ORD_US_CRE,

        FTC.NUM_SOLICITUD,
        FTC.FH_CRESOL FH_CRESOL,
        FTC.ESTADO_SOL,
        IFNULL(
            REPLACE(
                SUBSTR(FTC.SOL_CREADAPOR, 1, 
                    CASE 
                        WHEN INSTR(FTC.SOL_CREADAPOR, '@') > 0 
                        THEN INSTR(FTC.SOL_CREADAPOR, '@') - 1 
                        ELSE LENGTH(FTC.SOL_CREADAPOR) 
                    END
                ),
                '.',
                ' '
            ),
            REPLACE(FTC.SOL_CREADAPOR, '.', ' ')
        ) SOL_CREADAPOR,
        COALESCE(IFNULL(FDCA.PERIODO_ACT,0),IFNULL(FCXP.DIST_AMOUNT,0)) VR_SINIVA,
        (SELECT CASE WHEN SUM(COALESCE(TC.VR_UNIT_ORDEN,0))=0 THEN  SUM(COALESCE(TC.VR_ORDEN,0)) ELSE SUM(COALESCE(TC.VR_UNIT_ORDEN,0)* COALESCE(CANTIDAD,0)) END FROM amrl-data-prd.PRESENTATION.FACT_TRANSACCIONES_COMPRAS TC  WHERE TC.SK_POHEADERID=FTC.SK_POHEADERID AND TC.TRANSACTIONTYPE IN ('RECEIVE', 'RETURN TO VENDOR')) VR_ORDEN,
        (SELECT SUM(COALESCE(TC.IMP_ORDEN,0)) FROM amrl-data-prd.PRESENTATION.FACT_TRANSACCIONES_COMPRAS TC  WHERE TC.SK_POHEADERID=FTC.SK_POHEADERID AND TC.TRANSACTIONTYPE IN ('RECEIVE', 'RETURN TO VENDOR')) IMP_ORDEN,
        COALESCE( (SELECT MIN(FECHA_PAGO) FROM amrl-data-prd.PRESENTATION.FACT_CUENTAS_A_PAGAR_PAGOS FCXPP WHERE FCXP.SK_INVOICEID=FCXPP.SK_INVOICEID AND (APINVOICEPAYMENTSALLREVERSALFLAG !='Y' OR APINVOICEPAYMENTSALLREVERSALFLAG IS NULL)),FCXP.FH_CONTABLE) FECHA_PAGO,
FP.BK_PERIODO PERIODO
      FROM  amrl-data-prd.PRESENTATION.FACT_CUENTAS_A_PAGAR FCXP

      LEFT JOIN amrl-data-prd.PRESENTATION.FACT_TRANSACCIONES_COMPRAS FTC ON FTC.SK_PODISTRIBUTIONID=FCXP.SK_PODISTRIBUTIONID AND
      FTC.SK_TRANSACTIONID= FCXP.SK_RCVTRANSACTIONID AND (FTC.TRANSACTIONTYPE IN ('RECEIVE', 'RETURN TO VENDOR') OR FTC.TRANSACTIONTYPE IS NULL)
      LEFT JOIN amrl-data-prd.PRESENTATION.FACT_DISTRIBUCIONES_CONTABLES_AUX FDCA ON FDCA.SK_SOURCEDISTRIBUTIONIDNUM1=FCXP.SK_DISTORIGEN AND FDCA.SK_SOURCEIDINT1=FCXP.SK_INVOICEID AND FDCA.ENTITYCODE=FCXP.ORIGEN AND (FDCA.CLASSCODE NOT IN ('LIABILITY','PURCHASE_ORDER') OR FDCA.CLASSCODE  IS NULL) AND (FDCA.LEDGERID IN (300000006298079,300000007364650,300000007364653,300000007364656) OR FDCA.LEDGERID IS NULL)
      LEFT JOIN amrl-data-prd.PRESENTATION.DIM_CUENTAS DC ON DC.SK_COMBINATION_ID=FDCA.SK_CODECOMBINATIONID
      LEFT JOIN amrl-data-prd.PRESENTATION.DIM_TERCEROS DT ON DT.SK_TERCERO=FCXP.SK_TERCERO
      LEFT JOIN amrl-data-prd.PRESENTATION.DIM_PERIODOS FP ON FORMAT_DATE('%Y-%m', FCXP.FH_FACTURA) =  FORMAT_DATE('%Y-%m', FP.PERIODSTARTDATE)
      WHERE 1=1
        AND COALESCE(IFNULL(FDCA.PERIODO_ACT,0),IFNULL(FCXP.DIST_AMOUNT,0)) !=0
    )
    SELECT 
      COMPANIA,	
      NOMBRE_COMPANIA,	
      CUENTA,
      NOMBRE_CUENTA,
      GRUPO,
      NOMBRE_GRUPO,
      PROYECTO,
      NOMBRE_PROYECTO,	
      AREA,	
      NOMBRE_AREA,
      GRUPO_PAGO,
      NIT,
      TERCERO,
      PERIODO,
      FH_FACTURA AS FECHA_FACTURA,
      FH_VENC AS FECHA_VENCIMIENTO,
      NUMERO_FACTURA,
      (SUM(VR_SINIVA) + COALESCE (SUM((SELECT SUM(COALESCE(IMP.VR_SINIVA,0)) FROM FACTURAS  IMP WHERE  F.SK_INVOICEID=imp.SK_INVOICEID and F.SK_DISTORIGEN=IMP.SK_CHARGEAPPLICABLETODISTID  AND IMP.LOOKUPCODE='TAX')),COALESCE(SUM((SELECT SUM (COALESCE(IMP.VR_SINIVA,0)) FROM FACTURAS  IMP WHERE  F.SK_INVOICEID=imp.SK_INVOICEID and F.SK_RCVTRANSACTIONID=IMP.SK_RCVTRANSACTIONID AND IMP.LOOKUPCODE='TAX')),0))) VALOR_TOTAL_FACTURA,
      SUM(VR_SINIVA) VALOR_SIN_IVA,	
      COALESCE (SUM((SELECT SUM(COALESCE(IMP.VR_SINIVA,0)) FROM FACTURAS  IMP WHERE  F.SK_INVOICEID=imp.SK_INVOICEID and F.SK_DISTORIGEN=IMP.SK_CHARGEAPPLICABLETODISTID  AND IMP.LOOKUPCODE='TAX')),COALESCE(SUM((SELECT SUM (COALESCE(IMP.VR_SINIVA,0)) FROM FACTURAS  IMP WHERE  F.SK_INVOICEID=imp.SK_INVOICEID and F.SK_RCVTRANSACTIONID=IMP.SK_RCVTRANSACTIONID AND IMP.LOOKUPCODE='TAX')),0)) IVA,

      CASE WHEN SUM(CASE WHEN EST_CONT = 'Y' THEN 1 ELSE 0 END) = COUNT(*) THEN FH_CONTABLE END FH_CAUSACION,
      CASE
            WHEN SUM(CASE WHEN EST_CONT = 'Y' THEN 1 ELSE 0 END) = COUNT(*) THEN 'Contabilizado'
            WHEN SUM(CASE WHEN EST_CONT = 'N' THEN 1 ELSE 0 END) = COUNT(*) THEN 'No Contabilizado'
            ELSE 'Contabilizado Parcialmente'
      END AS ESTADO_CONTABLE,
      ESTADO_PAGO,
      CONDICION_PAGO_FACT AS CONDICION_PAGO_FACTURA,	
      DIAS_VENCIDOS_FACT AS DIAS_VENCIDOS_FACTURA,	
      ESTADO_FACTURA,
      COND_PAGO_PROV AS CONDICION_PAGO_PROVEEDOR,
      DIAS_VENCIDOSPROV AS DIAS_VENCIDOS_PROVEDOR,
      RANGO_VENCIMIENTO,	
      EST_VALIDACION AS ESTADO_VALIDACION,
      EST_APRO AS ESTADO_APROBACION,
      FECHA_PAGO,
      CONSOLIDADOR,
      DES_CONSOLIDADOR AS NOMBRE_CONSOLIDADOR,
      TIPO_PROYECTO,
      NUM_SOLICITUD AS NUMERO_SOLICITUD,
      FH_CRESOL AS FECHA_SOLICITUD,
      SOL_CREADAPOR AS SOLICITUD_CREADA_POR ,
      ESTADO_SOL AS ESTADO_SOLICITUD,
      ORDEN_COMPRA,
      FH_ORDEN FECHA_ORDEN,
      FH_APROB_ORD FECHA_APROBACION_ORDEN,
      ORD_US_CRE ORDEN_CREADA_POR,
      TIP_ORD AS TIPO_ORDEN,
      DESC_ORD AS DESCRIPCION_ORDEN,
      EST_DOC_ORD AS ESTADO_ORDEN,	
      ROUND(VR_ORDEN,2) AS VALOR_ORDEN,
      ROUND(IMP_ORDEN,2) AS IMPUESTO_ORDEN,
      ROUND(VR_ORDEN + IMP_ORDEN,2)  AS  VALOR_TOTAL_ORDEN

    FROM FACTURAS F
    WHERE 
      (F.LOOKUPCODE IN ('ITEM','PREPAY','MISCELLANEOUS') OR  F.LOOKUPCODE IS NULL)
      AND VR_FACTCAB !=0

    GROUP BY
      COMPANIA,	
      NOMBRE_COMPANIA,	
      CUENTA,
      NOMBRE_CUENTA,
      GRUPO,
      NOMBRE_GRUPO,
      PROYECTO,
      NOMBRE_PROYECTO,	
      AREA,	
      NOMBRE_AREA,
      GRUPO_PAGO,
      NIT,
      TERCERO,
      PERIODO,
      FH_FACTURA,
      FH_VENC,
      NUMERO_FACTURA,
      FH_CONTABLE, 
      ESTADO_PAGO,
      CONDICION_PAGO_FACT,	
      DIAS_VENCIDOS_FACT,	
      ESTADO_FACTURA,
      COND_PAGO_PROV,
      DIAS_VENCIDOSPROV,
      RANGO_VENCIMIENTO,	
      EST_VALIDACION,
      EST_APRO,
      FECHA_PAGO,
      CONSOLIDADOR,
      DES_CONSOLIDADOR,
      TIPO_PROYECTO,
      NUM_SOLICITUD,
      FH_CRESOL,
      SOL_CREADAPOR,
      ESTADO_SOL,
      ORDEN_COMPRA,
      FH_ORDEN,
      FH_APROB_ORD,
      ORD_US_CRE,
      TIP_ORD,
      DESC_ORD,
      EST_DOC_ORD,	
      VR_ORDEN,
      IMP_ORDEN,
      VR_ORDEN + IMP_ORDEN
    HAVING VALOR_TOTAL_FACTURA !=0;
END;