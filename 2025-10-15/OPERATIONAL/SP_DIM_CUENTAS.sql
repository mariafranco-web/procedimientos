CREATE PROCEDURE `amrl-data-prd`.OPERATIONAL.SP_DIM_CUENTAS()
OPTIONS(
  description="Informacion de las cuentas contables de la compañia")
BEGIN CREATE TEMP TABLE TEMP_DIM_CUENTAS AS ---CREATE OR REPLACE TABLE  amrl-data-prd.PRESENTATION.DIM_CUENTAS AS
(
	/***************************** Contiene la informacion combinaciones y segmentos contables de  Compañia, Cuenta, Grupo, Proyecto, Area, Futuro, Consolidador y los niveles del 1 al 10 en que sese encutran agrupadas las cuentas **************************/
	SELECT
		SHA256(CAST(GCC.CODECOMBINATIONCODECOMBINATIONID AS STRING)) AS SK_COMBINATION_ID,
		GCC.CODECOMBINATIONCODECOMBINATIONID AS BK_COMBINATION_ID,
		GCC.CODECOMBINATIONSEGMENT1  AS COMPANIA,
		GCC.CODECOMBINATIONSEGMENT2  AS CUENTA,
		GCC.CODECOMBINATIONSEGMENT3  AS GRUPO,
		GCC.CODECOMBINATIONSEGMENT4  AS PROYECTO,
		GCC.CODECOMBINATIONSEGMENT5	 AS AREA,
		GCC.CODECOMBINATIONSEGMENT6  AS FUTURO,
		FTN.PARENTPK1VALUE           AS CONSOLIDADOR,
		FVV.DESCRIPTION 						 AS DES_CONSOLIDADOR,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 1)  AS NV1,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 2)  AS NV2,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 3)  AS NV3,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 4)  AS NV4,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 5)  AS NV5,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 6)  AS NV6,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 7)  AS NV7,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 8)  AS NV8,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 9)  AS NV9,
		SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 10) AS NV10,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 1)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL1,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 2)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL2,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 3)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL3,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 4)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL4,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 5)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL5,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 6)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA')  AS NOMBRE_NVL6,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 7)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL7,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 8)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL8,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 9)  = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL9,
		(SELECT	FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE SUBSTR(GCC.CODECOMBINATIONSEGMENT2, 1, 10) = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_NVL10,
		(SELECT	FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE GCC.CODECOMBINATIONSEGMENT1 = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_COMPANIA') AS NOMBRE_COMPANIA,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE GCC.CODECOMBINATIONSEGMENT2 = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_CUENTA') 	AS NOMBRE_CUENTA,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE GCC.CODECOMBINATIONSEGMENT3 = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_GRUPO') 		AS NOMBRE_GRUPO,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE GCC.CODECOMBINATIONSEGMENT4 = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_PROYECTO') AS NOMBRE_PROYECTO,
		(SELECT	FND.DESCRIPTION	FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE GCC.CODECOMBINATIONSEGMENT5 = FND.FLEX_VALUE	AND FND.VALUE_CATEGORY = 'GA_AREA') 		AS NOMBRE_AREA,
		(SELECT FND.DESCRIPTION FROM amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FND WHERE GCC.CODECOMBINATIONSEGMENT6 = FND.FLEX_VALUE AND FND.VALUE_CATEGORY = 'GA_FUTURO') 	AS NOMBRE_FUTURO
	FROM
		amrl-data-prd.RAW.FUSION_GL_CODE_COMBINATIONS GCC
		LEFT JOIN amrl-data-prd.RAW.FUSION_FND_TREE_NODE FTN ON GCC.CODECOMBINATIONSEGMENT4 = FTN.PK1STARTVALUE AND FTN.TREECODE = 'FCR_GA_PROYECTOS'
		LEFT JOIN amrl-data-prd.RAW.FUSION_FND_FLEX_VALUES_VL FVV ON FVV.FLEX_VALUE = FTN.PARENTPK1VALUE
);

MERGE PRESENTATION.DIM_CUENTAS AS T USING (
	SELECT
		*
	FROM
		TEMP_DIM_CUENTAS
) AS S ON (T.BK_COMBINATION_ID = S.BK_COMBINATION_ID)
WHEN MATCHED THEN
UPDATE
SET
	T.SK_COMBINATION_ID = S.SK_COMBINATION_ID,
	T.BK_COMBINATION_ID = S.BK_COMBINATION_ID,
	T.COMPANIA = S.COMPANIA,
	T.CUENTA = S.CUENTA,
	T.GRUPO = S.GRUPO,
	T.PROYECTO = S.PROYECTO,
	T.AREA = S.AREA,
	T.FUTURO = S.FUTURO,
	T.NOMBRE_COMPANIA = S.NOMBRE_COMPANIA,
	T.NOMBRE_CUENTA = S.NOMBRE_CUENTA,
	T.NOMBRE_GRUPO = S.NOMBRE_GRUPO,
	T.NOMBRE_PROYECTO = S.NOMBRE_PROYECTO,
	T.NOMBRE_AREA = S.NOMBRE_AREA,
	T.NOMBRE_FUTURO = S.NOMBRE_FUTURO,
	T.CONSOLIDADOR = S.CONSOLIDADOR,
	T.DES_CONSOLIDADOR = S.DES_CONSOLIDADOR,
	T.NV1 = S.NV1,
	T.NV2 = S.NV2,
	T.NV3 = S.NV3,
	T.NV4 = S.NV4,
	T.NV5 = S.NV5,
	T.NV6 = S.NV6,
	T.NV7 = S.NV7,
	T.NV8 = S.NV8,
	T.NV9 = S.NV9,
	T.NV10 = S.NV10,
	T.NOMBRE_NVL1 = S.NOMBRE_NVL1,
	T.NOMBRE_NVL2 = S.NOMBRE_NVL2,
	T.NOMBRE_NVL3 = S.NOMBRE_NVL3,
	T.NOMBRE_NVL4 = S.NOMBRE_NVL4,
	T.NOMBRE_NVL5 = S.NOMBRE_NVL5,
	T.NOMBRE_NVL6 = S.NOMBRE_NVL6,
	T.NOMBRE_NVL7 = S.NOMBRE_NVL7,
	T.NOMBRE_NVL8 = S.NOMBRE_NVL8,
	T.NOMBRE_NVL9 = S.NOMBRE_NVL9,
	T.NOMBRE_NVL10 = S.NOMBRE_NVL10
	WHEN NOT MATCHED THEN
INSERT
	(
		SK_COMBINATION_ID,
		BK_COMBINATION_ID,
		COMPANIA,
		CUENTA,
		GRUPO,
		PROYECTO,
		AREA,
		FUTURO,
		NOMBRE_COMPANIA,
		NOMBRE_CUENTA,
		NOMBRE_GRUPO,
		NOMBRE_PROYECTO,
		NOMBRE_AREA,
		NOMBRE_FUTURO,
		CONSOLIDADOR,
		DES_CONSOLIDADOR,
		NV1,
		NV2,
		NV3,
		NV4,
		NV5,
		NV6,
		NV7,
		NV8,
		NV9,
		NV10,
		NOMBRE_NVL1,
		NOMBRE_NVL2,
		NOMBRE_NVL3,
		NOMBRE_NVL4,
		NOMBRE_NVL5,
		NOMBRE_NVL6,
		NOMBRE_NVL7,
		NOMBRE_NVL8,
		NOMBRE_NVL9,
		NOMBRE_NVL10
	)
VALUES
	(
		S.SK_COMBINATION_ID,
		S.BK_COMBINATION_ID,
		S.COMPANIA,
		S.CUENTA,
		S.GRUPO,
		S.PROYECTO,
		S.AREA,
		S.FUTURO,
		S.NOMBRE_COMPANIA,
		S.NOMBRE_CUENTA,
		S.NOMBRE_GRUPO,
		S.NOMBRE_PROYECTO,
		S.NOMBRE_AREA,
		S.NOMBRE_FUTURO,
		S.CONSOLIDADOR,
		S.DES_CONSOLIDADOR,
		S.NV1,
		S.NV2,
		S.NV3,
		S.NV4,
		S.NV5,
		S.NV6,
		S.NV7,
		S.NV8,
		S.NV9,
		S.NV10,
		S.NOMBRE_NVL1,
		S.NOMBRE_NVL2,
		S.NOMBRE_NVL3,
		S.NOMBRE_NVL4,
		S.NOMBRE_NVL5,
		S.NOMBRE_NVL6,
		S.NOMBRE_NVL7,
		S.NOMBRE_NVL8,
		S.NOMBRE_NVL9,
		S.NOMBRE_NVL10
	);

END;