CREATE PROCEDURE `amrl-data-prd`.OPERATIONAL.SP_DIM_TERCEROS()
OPTIONS(
  description="Agrupa la informaci칩n de  los terceros  por id de acuerdo al origen de la transaccion de  los contactos, clientes, proveedores y empleados de la compa침ia")
BEGIN CREATE TEMP TABLE TEMP_TERCEROS AS -- CREATE  OR REPLACE  TABLE `amrl-data-prd.PRESENTATION.DIM_TERCEROS` AS
(
  WITH TERCEROS AS (
    /**************************** Agrupa la informaci칩n de  los terceros  por id de acuerdo al origen de la transaccion de  los contactos, clientes, proveedores y empleados de la compa침ia ***************************/
       SELECT
      'PROVEEDORES' TORIGEN,
      SHA256(CAST(PSP.VENDORID AS STRING)) AS SK_TERCERO,
      PSP.VENDORID BK_TERCERO,
      HZP.PARTYNAME TERCERO,
      COALESCE(PSP.INCOMETAXID,HZP.JGZZFISCALCODE,HZP.DUNSNUMBERC,PSPV.PARTYDUNSNUMBERC,PSPV.PARTYTAXPROFILEGENERICREPREGISTRATIONNUMBER) NIT
    FROM
      amrl-data-prd.RAW.FUSION_HZ_PARTIES AS HZP
      INNER JOIN amrl-data-prd.RAW.FUSION_POZ_SUPPLIERS_PII AS PSP ON HZP.PARTYID = PSP.PARTYID
      LEFT JOIN amrl-data-prd.RAW.FUSION_POZ_SUPPLIERS_PII_V PSPV ON PSP.PARTYID = PSPV.SUPPLIERPARTYID
    UNION
    ALL
    SELECT
      'ACCOUNTS' TORIGEN,
      SHA256(CAST(HCA.CUSTACCOUNTID AS STRING)) AS SK_TERCERO,
      HCA.CUSTACCOUNTID AS BK_TERCERO,
      HZP.PARTYNAME AS TERCERO,
      COALESCE(HZP.JGZZFISCALCODE,HZP.DUNSNUMBERC,HZPP.ATTRIBUTE2 ) AS NIT,
    FROM
      amrl-data-prd.RAW.FUSION_HZ_PARTIES AS HZP
      INNER JOIN amrl-data-prd.RAW.FUSION_HZ_CUST_ACCOUNTS HCA ON HCA.PARTYID = HZP.PARTYID
      LEFT JOIN amrl-data-prd.RAW.FUSION_HZ_PERSON_PROFILES HZPP ON HZPP.PARTYID = HZP.PARTYID
    UNION
    ALL
    SELECT
      'PARTIES' TORIGEN,
      SHA256(CAST(HZP.PARTYID AS STRING)) AS SK_TERCERO,
      HZP.PARTYID AS BK_TERCERO,
      HZP.PARTYNAME AS TERCERO,
      COALESCE(PSP.INCOMETAXID, HZP.JGZZFISCALCODE, HZP.DUNSNUMBERC,HZPP.ATTRIBUTE2, PNI.PERSONDETAILSPEOPERSONNUMBER,PSPV.PARTYDUNSNUMBERC,PSPV.PARTYTAXPROFILEGENERICREPREGISTRATIONNUMBER) AS NIT,
    FROM
      amrl-data-prd.RAW.FUSION_HZ_PARTIES AS HZP
      LEFT JOIN amrl-data-prd.RAW.FUSION_HZ_PERSON_PROFILES HZPP ON HZPP.PARTYID = HZP.PARTYID
      LEFT JOIN amrl-data-prd.RAW.FUSION_PER_NATIONAL_IDENTIFIERS PNI ON HZP.ORIGSYSTEMREFERENCE = CAST(PNI.PERSONID AS string)
      LEFT JOIN amrl-data-prd.RAW.FUSION_POZ_SUPPLIERS_PII_V PSPV ON HZP.PARTYID = PSPV.SUPPLIERPARTYID
      LEFT JOIN amrl-data-prd.RAW.FUSION_POZ_SUPPLIERS_PII PSP ON PSP.VENDORID = PSPV.VENDORID
  )
  SELECT
    SK_TERCERO,
    BK_TERCERO,
    IFNULL(TT.TERCERO, T.TERCERO) TERCERO,
    REGEXP_EXTRACT(T.NIT, R'^[^-]+') NIT
  FROM
    TERCEROS T
    LEFT JOIN (
      SELECT
        MAX(TERCERO) TERCERO,
        REGEXP_EXTRACT(NIT, R'^[^-]+') NIT
      FROM
        TERCEROS
      GROUP BY
        NIT
    ) TT ON TT.NIT = REGEXP_EXTRACT(T.NIT, R'^[^-]+')
);

MERGE PRESENTATION.DIM_TERCEROS AS T USING (
  SELECT
    *
  FROM
    (
      SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY SK_TERCERO) AS fila
      FROM
        TEMP_TERCEROS
    )
  WHERE
    FILA = 1
) AS S ON (T.SK_TERCERO = S.SK_TERCERO)
WHEN MATCHED THEN
UPDATE
SET
  T.SK_TERCERO = S.SK_TERCERO,
  T.BK_TERCERO = S.BK_TERCERO,
  T.TERCERO = S.TERCERO,
  T.NIT = S.NIT
  WHEN NOT MATCHED THEN
INSERT
  (
    SK_TERCERO,
    BK_TERCERO,
    TERCERO,
    NIT
  )
VALUES
  (
    S.SK_TERCERO,
    S.BK_TERCERO,
    S.TERCERO,
    S.NIT
  );

END;