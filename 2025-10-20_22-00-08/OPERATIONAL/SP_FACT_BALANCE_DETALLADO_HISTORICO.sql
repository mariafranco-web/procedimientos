CREATE PROCEDURE `amrl-data-prd`.OPERATIONAL.SP_FACT_BALANCE_DETALLADO_HISTORICO()
OPTIONS(
  description="contiene la información del balance de tallado por segmento y tercero  hasta el año anterior del periodo en curso ")
BEGIN 
		
		CREATE OR REPLACE TABLE amrl-data-prd.PRESENTATION.FACT_BALANCE_DETALLADO_HISTORICO PARTITION BY
   FH_APERTURA_PER CLUSTER BY NIVEL_2,NIVEL_6,CUENTA, NOMBRE_TERCERO AS

		 	/**************************** Esta opracion crea la tabla de hechos SP_FACT_BALANCE_DETALLADO_HISTORICO, el objetibo de esta tabla es consolidar la informacion de años antriores en una sola tabla para no estar recalculando la informacion esta almacena la informacion hata el 31 de diciembre del año anterior al año en curso  ***************************/

        WITH SABANA_DATOS AS (
			SELECT 
				* 
	    FROM amrl-data-prd.PRESENTATION.FACT_MOVIMIENTO_DETALLADO MDT
			WHERE 1=1
				AND  (IFNULL (MDT.DEBITO,0) !=0
				OR	MDT.CREDITO !=0 )
				AND MDT.FH_CONTABLE >= CASE WHEN MDT.CUENTA BETWEEN '4000000000' AND '6999999999' THEN  PARSE_DATE('%Y-%m-%d', CAST(MDT.PERIODPERIODYEAR AS STRING) || '-01-01') ELSE '2019-12-01' END 
				AND  MDT.FH_APERTURA_PER>='2019-12-01'
				AND MDT.PERIODENDDATE <=DATE_SUB(DATE_TRUNC(CURRENT_DATE(), YEAR), INTERVAL 1 DAY)
				AND MDT.FH_CONTABLE BETWEEN '2019-12-01' AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), YEAR), INTERVAL 1 DAY)

		)
SELECT 
	SBD.COMPANIA,
	SBD.NOMBRE_COMPANIA,
	SBD.NIVEL_1,
	SBD.NOMBRE_NVL1,
	SBD.NIVEL_2,
	SBD.NOMBRE_NVL2,
	SBD.NIVEL_3,
	SBD.NOMBRE_NVL3,
	SBD.NIVEL_4,
	SBD.NOMBRE_NVL4,
	SBD.NIVEL_5,
	SBD.NOMBRE_NVL5,
	SBD.NIVEL_6,
	SBD.NOMBRE_NVL6,
	SBD.NIVEL_7,
	SBD.NOMBRE_NVL7,
	SBD.NIVEL_8,
	SBD.NOMBRE_NVL8,
	SBD.NIVEL_9,
	SBD.NOMBRE_NVL9,
	SBD.NIVEL_10,
	SBD.NOMBRE_NVL10,
	SBD.CUENTA,
	SBD.NOMBRE_CUENTA,
	SBD.GRUPO,
	SBD.NOMBRE_GRUPO,
	SBD.CONSOLIDADOR,
	SBD.DES_CONSOLIDADOR,
	SBD.PROYECTO,
	SBD.NOMBRE_PROYECTO,
	SBD.AREA,
	SBD.NOMBRE_AREA,
	SBD.FUTURO,
	SBD.NOMBRE_FUTURO,
	SBD.LIBRO,
	SBD.NIT,
	SBD.NOMBRE_TERCERO,
	SBD.NIT_CABECERA,
	SBD.TERCERO_CABECERA,
	PER.BK_PERIODO,
	PER.PERIODSTARTDATE  	AS FH_APERTURA_PER,
	ROUND(SUM(CASE 
        WHEN PER.PERIODSTARTDATE > SBD.FH_APERTURA_PER 
        THEN SBD.ACTIVIDAD_PERIODO 
        ELSE 0 
      END),2) AS SALDO_INC,

  ROUND(SUM(CASE 
        WHEN PER.PERIODSTARTDATE = SBD.FH_APERTURA_PER  
        THEN SBD.DEBITO 
        ELSE 0 
      END),2) AS DEBITO,
			 ROUND(SUM(CASE 
        WHEN PER.PERIODSTARTDATE = SBD.FH_APERTURA_PER  
        THEN SBD.CREDITO 
        ELSE 0 
      END),2) AS CREDITO,

  ROUND(SUM(CASE 
        WHEN PER.PERIODSTARTDATE = SBD.FH_APERTURA_PER  
        THEN SBD.ACTIVIDAD_PERIODO 
        ELSE 0 
      END),2) AS ACTIVIDAD_PERIODO,

  ROUND(SUM(CASE 
        WHEN PER.PERIODSTARTDATE >= SBD.FH_APERTURA_PER   
        THEN SBD.ACTIVIDAD_PERIODO 
        ELSE 0 
      END),2) AS SALDO_FN

 FROM SABANA_DATOS SBD,
			amrl-data-prd.PRESENTATION.DIM_PERIODOS PER
			
WHERE 
	 SBD.FH_APERTURA_PER >= CASE WHEN SBD.CUENTA BETWEEN '4000000000' AND '6999999999' THEN  PARSE_DATE('%Y-%m-%d', CAST(PER.PERIODPERIODYEAR AS STRING) || '-01-01') ELSE '2019-12-01' END 
		AND  PER.PERIODSTARTDATE>='2019-12-01'
		AND PER.PERIODENDDATE <=DATE_TRUNC(CURRENT_DATE(), MONTH) + INTERVAL 1 MONTH - INTERVAL 1 DAY 
			AND SBD.FH_APERTURA_PER <= PER.PERIODSTARTDATE

GROUP BY
		SBD.COMPANIA,
		SBD.NOMBRE_COMPANIA,
		SBD.NIVEL_1,
		SBD.NOMBRE_NVL1,
		SBD.NIVEL_2,
		SBD.NOMBRE_NVL2,
		SBD.NIVEL_3,
		SBD.NOMBRE_NVL3,
		SBD.NIVEL_4,
		SBD.NOMBRE_NVL4,
		SBD.NIVEL_5,
		SBD.NOMBRE_NVL5,
		SBD.NIVEL_6,
		SBD.NOMBRE_NVL6,
		SBD.NIVEL_7,
		SBD.NOMBRE_NVL7,
		SBD.NIVEL_8,
		SBD.NOMBRE_NVL8,
		SBD.NIVEL_9,
		SBD.NOMBRE_NVL9,
		SBD.NIVEL_10,
		SBD.NOMBRE_NVL10,
		SBD.CUENTA,
		SBD.NOMBRE_CUENTA,
		SBD.GRUPO,
		SBD.NOMBRE_GRUPO,
		SBD.CONSOLIDADOR,
		SBD.DES_CONSOLIDADOR,
		SBD.PROYECTO,
		SBD.NOMBRE_PROYECTO,
		SBD.AREA,
		SBD.NOMBRE_AREA,
		SBD.FUTURO,
		SBD.NOMBRE_FUTURO,
		SBD.LIBRO,
		SBD.NIT,
		SBD.NOMBRE_TERCERO,
		SBD.NIT_CABECERA,
		SBD.TERCERO_CABECERA,
		PER.BK_PERIODO,
		PER.PERIODSTARTDATE;
		END;